CQ1: For the first sorting algorithm (in after_swap1), when n is 4, is the number of swaps always going to be the same, no matter the content of the input array?  Why or why not?
    No the number of swaps would vary depending on the content. For example, if the content was 
    1 2 3 4, there would be no swaps since it looks at the element and the element following it, if the
    beginning element is larger than the following element then it would swap.
CQ2: For the first sorting algorithm (in after_swap1), when n is 4, is the number of comparisons between adjacent elements always going to be the same, no matter the content of the input array?  Why or why not?
    Yes, the number of comparisons would always be the same regardless of content. Since the algorithm takes the first
    element and compares it to the following element n amount of times.
CQ3:  For the first sorting algorithm (in after_swap1), is the algorithm correct?  That is, will it correctly sort any array of length n?  If so, give a one sentence justification for your answer, and if not, provide a specific counter-example (an array that would not be sorted correctly).
    Yes, this algorithm is shown to compare any element to all other elements in the array and so it would be able to check
    if it is lower or higher than the other elements and therefore swap succesfully. 
CQ4:  For the second sorting algorithm (in after_swap2), is the algorithm correct?  That is, will it correctly sort any array of length n?  If so, give a one sentence justification for your answer, and if not, provide a specific counter-example (an array that would not be sorted correctly).
    No, it does not work. For the situation where the array starts as 4 3 2 1, it takes the following iterations to 
    sort it. 3 4 2 1 -> 3 2 4 1 -> 2 3 1 4 -> 2 1 3 4 -> 1 2 3 4. which is more than the 3 iterations allowed by the first for loop.

CQ7:  For the third sorting algorithm (in after_swap5), is the algorithm correct?  That is, will it correctly sort any array of length n?  If so, give a one sentence justification for your answer, and if not, provide a specific counter-example (an array that would not be sorted correctly).
    No, the example given in the problem works as a counter example, the array 0 2 3 1 -> 3 1 2 0 after the sort method.
CQ9:  For the third sorting algorithm (in after_swap5), if n is 4, what is a tight lower bound to the number of comparisons used over the course of the algorithm?
    There would be 6 + 2 comparisons